//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebSite.FacultyService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FacultyDto", Namespace="http://schemas.datacontract.org/2004/07/ApplicationServices.DTOs")]
    [System.SerializableAttribute()]
    public partial class FacultyDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FacultyService.IFaculty")]
    public interface IFaculty {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaculty/Message", ReplyAction="http://tempuri.org/IFaculty/MessageResponse")]
        string Message();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaculty/Message", ReplyAction="http://tempuri.org/IFaculty/MessageResponse")]
        System.Threading.Tasks.Task<string> MessageAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaculty/GetFaculties", ReplyAction="http://tempuri.org/IFaculty/GetFacultiesResponse")]
        WebSite.FacultyService.FacultyDto[] GetFaculties();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaculty/GetFaculties", ReplyAction="http://tempuri.org/IFaculty/GetFacultiesResponse")]
        System.Threading.Tasks.Task<WebSite.FacultyService.FacultyDto[]> GetFacultiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaculty/GetFacultyByID", ReplyAction="http://tempuri.org/IFaculty/GetFacultyByIDResponse")]
        WebSite.FacultyService.FacultyDto GetFacultyByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaculty/GetFacultyByID", ReplyAction="http://tempuri.org/IFaculty/GetFacultyByIDResponse")]
        System.Threading.Tasks.Task<WebSite.FacultyService.FacultyDto> GetFacultyByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaculty/PostFaculty", ReplyAction="http://tempuri.org/IFaculty/PostFacultyResponse")]
        string PostFaculty(WebSite.FacultyService.FacultyDto facultyDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaculty/PostFaculty", ReplyAction="http://tempuri.org/IFaculty/PostFacultyResponse")]
        System.Threading.Tasks.Task<string> PostFacultyAsync(WebSite.FacultyService.FacultyDto facultyDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaculty/PutFaculty", ReplyAction="http://tempuri.org/IFaculty/PutFacultyResponse")]
        string PutFaculty(WebSite.FacultyService.FacultyDto facultyDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaculty/PutFaculty", ReplyAction="http://tempuri.org/IFaculty/PutFacultyResponse")]
        System.Threading.Tasks.Task<string> PutFacultyAsync(WebSite.FacultyService.FacultyDto facultyDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaculty/DeleteFaculty", ReplyAction="http://tempuri.org/IFaculty/DeleteFacultyResponse")]
        string DeleteFaculty(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaculty/DeleteFaculty", ReplyAction="http://tempuri.org/IFaculty/DeleteFacultyResponse")]
        System.Threading.Tasks.Task<string> DeleteFacultyAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFacultyChannel : WebSite.FacultyService.IFaculty, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FacultyClient : System.ServiceModel.ClientBase<WebSite.FacultyService.IFaculty>, WebSite.FacultyService.IFaculty {
        
        public FacultyClient() {
        }
        
        public FacultyClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FacultyClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FacultyClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FacultyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Message() {
            return base.Channel.Message();
        }
        
        public System.Threading.Tasks.Task<string> MessageAsync() {
            return base.Channel.MessageAsync();
        }
        
        public WebSite.FacultyService.FacultyDto[] GetFaculties() {
            return base.Channel.GetFaculties();
        }
        
        public System.Threading.Tasks.Task<WebSite.FacultyService.FacultyDto[]> GetFacultiesAsync() {
            return base.Channel.GetFacultiesAsync();
        }
        
        public WebSite.FacultyService.FacultyDto GetFacultyByID(int id) {
            return base.Channel.GetFacultyByID(id);
        }
        
        public System.Threading.Tasks.Task<WebSite.FacultyService.FacultyDto> GetFacultyByIDAsync(int id) {
            return base.Channel.GetFacultyByIDAsync(id);
        }
        
        public string PostFaculty(WebSite.FacultyService.FacultyDto facultyDto) {
            return base.Channel.PostFaculty(facultyDto);
        }
        
        public System.Threading.Tasks.Task<string> PostFacultyAsync(WebSite.FacultyService.FacultyDto facultyDto) {
            return base.Channel.PostFacultyAsync(facultyDto);
        }
        
        public string PutFaculty(WebSite.FacultyService.FacultyDto facultyDto) {
            return base.Channel.PutFaculty(facultyDto);
        }
        
        public System.Threading.Tasks.Task<string> PutFacultyAsync(WebSite.FacultyService.FacultyDto facultyDto) {
            return base.Channel.PutFacultyAsync(facultyDto);
        }
        
        public string DeleteFaculty(int id) {
            return base.Channel.DeleteFaculty(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteFacultyAsync(int id) {
            return base.Channel.DeleteFacultyAsync(id);
        }
    }
}
